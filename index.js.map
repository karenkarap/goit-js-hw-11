{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nexport const getImagesByQuery = query => {\n  return axios.get('https://pixabay.com/api/', {\n    params: {\n      key: '51377392-58695daed08c65a7357b6e761',\n      q: query,\n      image_type: 'photo',\n      orientation: 'horizontal',\n      safesearch: true,\n    },\n  });\n};\n","import SimpleLightbox from 'simplelightbox';\n\nconst refs = {\n  gallery: document.querySelector('.gallery'),\n  loader: document.querySelector('.js-loader'),\n};\n\nconst lightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n  captionPosition: 'bottom',\n});\n\n// TODO: Ця функція повинна приймати масив images, створювати HTML-розмітку для галереї,\n// TODO: додавати її в контейнер галереї та викликати метод екземпляра SimpleLightbox refresh().\n// TODO: Нічого не повертає.\n\nexport const createGallery = images => {\n  const createdCard = images\n    .map(\n      ({\n        webformatURL: preview,\n        largeImageURL: original,\n        tags: description,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `\n        <li class=\"gallery-item\">\n            <div class=\"card\"> \n                <a class=\"gallery-link\" href=\"${original}\">\n                    <img class=\"gallery-image\" src=\"${preview}\" alt=\"${description}\" />\n                </a>\n                <div class=\"info\">\n                    <div class=\"info-row labels\">\n                        <p>Likes</p>\n                        <p>Views</p>\n                        <p>Comments</p>\n                        <p>Downloads</p>\n                    </div>\n                    <div class=\"info-row values\">\n                        <p>${likes}</p>\n                        <p>${views}</p>\n                        <p>${comments}</p>\n                        <p>${downloads}</p>\n                    </div>\n                </div>\n            </div>\n        </li>\n            `;\n      }\n    )\n    .join('');\n\n  refs.gallery.innerHTML = createdCard;\n\n  lightbox.refresh();\n};\n\n// TODO: Ця функція нічого не приймає та повинна очищати вміст контейнера галереї. Нічого не повертає.\n\nexport const clearGallery = () => {\n  refs.gallery.innerHTML = '';\n};\n\n// TODO: Ця функція нічого не приймає, повинна додавати клас для відображення лоадера. Нічого не повертає.\n\nexport const showLoader = () => {\n  refs.loader.classList.remove('is-hidden');\n};\n\n// TODO: Ця функція нічого не приймає, повинна прибирати клас для відображення лоадера. Нічого не повертає.\n\nexport const hideLoader = () => {\n  refs.loader.classList.add('is-hidden');\n};\n","import iziToast from 'izitoast';\nimport { getImagesByQuery } from './js/pixabay-api';\nimport { createGallery } from './js/render-functions';\nimport { clearGallery } from './js/render-functions';\nimport { showLoader } from './js/render-functions';\nimport { hideLoader } from './js/render-functions';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconst onFormSubmit = event => {\n  event.preventDefault();\n\n  const searchedText = event.target.elements['search-text'].value.trim();\n\n  if (!searchedText) {\n    iziToast.warning({\n      title: 'Warning',\n      message: 'Search field cannot be empty.',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  clearGallery();\n  showLoader();\n\n  getImagesByQuery(searchedText)\n    .finally(() => {\n      hideLoader();\n    })\n    .then(response => {\n      const images = response.data.hits;\n\n      if (images.length === 0) {\n        iziToast.error({\n          title: 'Error',\n          message:\n            'Sorry, there are no images matching your search query. Please try again!',\n          position: 'topRight',\n        });\n      }\n\n      createGallery(images);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n"],"names":["getImagesByQuery","query","axios","refs","lightbox","SimpleLightbox","createGallery","images","createdCard","preview","original","description","likes","views","comments","downloads","clearGallery","showLoader","hideLoader","onFormSubmit","event","searchedText","iziToast","response","err"],"mappings":"owBAEO,MAAMA,EAAmBC,GACvBC,EAAM,IAAI,2BAA4B,CAC3C,OAAQ,CACN,IAAK,qCACL,EAAGD,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACb,CACL,CAAG,ECTGE,EAAO,CACX,QAAS,SAAS,cAAc,UAAU,EAC1C,OAAQ,SAAS,cAAc,YAAY,CAC7C,EAEMC,EAAW,IAAIC,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,IACd,gBAAiB,QACnB,CAAC,EAMYC,EAAgBC,GAAU,CACrC,MAAMC,EAAcD,EACjB,IACC,CAAC,CACC,aAAcE,EACd,cAAeC,EACf,KAAMC,EACN,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IACe;AAAA;AAAA;AAAA,gDAGiCL,CAAQ;AAAA,sDACFD,CAAO,UAAUE,CAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAUrDC,CAAK;AAAA,6BACLC,CAAK;AAAA,6BACLC,CAAQ;AAAA,6BACRC,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA,aAOjC,EACA,KAAK,EAAE,EAEVZ,EAAK,QAAQ,UAAYK,EAEzBJ,EAAS,QAAO,CAClB,EAIaY,EAAe,IAAM,CAChCb,EAAK,QAAQ,UAAY,EAC3B,EAIac,EAAa,IAAM,CAC9Bd,EAAK,OAAO,UAAU,OAAO,WAAW,CAC1C,EAIae,EAAa,IAAM,CAC9Bf,EAAK,OAAO,UAAU,IAAI,WAAW,CACvC,ECtEMA,EAAO,CACX,KAAM,SAAS,cAAc,OAAO,EACpC,QAAS,SAAS,cAAc,UAAU,CAC5C,EAEMgB,EAAeC,GAAS,CAC5BA,EAAM,eAAc,EAEpB,MAAMC,EAAeD,EAAM,OAAO,SAAS,aAAa,EAAE,MAAM,OAEhE,GAAI,CAACC,EAAc,CACjBC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,gCACT,SAAU,UAChB,CAAK,EACD,MACD,CAEDN,IACAC,IAEAjB,EAAiBqB,CAAY,EAC1B,QAAQ,IAAM,CACbH,GACN,CAAK,EACA,KAAKK,GAAY,CAChB,MAAMhB,EAASgB,EAAS,KAAK,KAEzBhB,EAAO,SAAW,GACpBe,EAAS,MAAM,CACb,MAAO,QACP,QACE,2EACF,SAAU,UACpB,CAAS,EAGHhB,EAAcC,CAAM,CAC1B,CAAK,EACA,MAAMiB,GAAO,CACZ,QAAQ,IAAIA,CAAG,CACrB,CAAK,CACL,EAEArB,EAAK,KAAK,iBAAiB,SAAUgB,CAAY"}